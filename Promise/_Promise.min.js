const _Promise=function(b){if(!(b&&'[object Function]'=={}.toString.call(b)))throw new Error(`Promise resolve ${b} is not a function`);let d={};d.functionChain=[],this.then=e=>{return d.functionChain.push({type:'then',func:e}),this},this.catch=e=>{return d.functionChain.push({type:'catch',func:e}),this},this.transferEventListeners=e=>{d.functionChain=e},d.resolve=e=>{let f=d.functionChain;for(let g=0;g<f.length;g++)if('then'==f[g].type)try{let h=f[g].func(e);if(h instanceof _Promise){h.transferEventListeners(f.slice(g+1)),process.nextTick(()=>{delete this});break}else e=h}catch(h){process.nextTick(()=>{d.reject(h)});break}},d.reject=e=>{let f=d.functionChain;for(let g=0;g<f.length;g++)if('catch'==f[g].type)try{let h=f[g].func(e);if(h instanceof _Promise){h.transferEventListeners(f.slice(g+1)),process.nextTick(()=>{delete this});break}else{d.functionChain=f.slice(g+1),process.nextTick(()=>{d.resolve(h)});break}}catch(h){d.functionChain=f.slice(g+1),process.nextTick(()=>{d.reject(h)});break}},process.nextTick(()=>{try{b(d.resolve,d.reject)}catch(e){d.reject(e)}})};module.exports=_Promise;